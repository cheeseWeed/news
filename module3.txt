(*chapter 7 exercise2 *)
fun member (e,L) = if null L then false else if e = hd L then true else member (e,tl(L));
	member (2,[0,1,2,3,4]);
	member (2,[0,1,3,4,5]);
	member (2,[]);

(*chapter 7 exercise3 *)
fun less (e,L)= if null L then nil else
	if e > hd L then  hd L :: less(e,tl (L)) else
	less(e, (tl L));
	less(5,[1,2,3]);

fun less (e,nil) = nil
| less (e,(x::xs)) = if x < e then x::(less(e,xs)) else 
less(e,xs);
less (5,[3,4,5,6,7,2,1]);

(*chapter 7 exercise4 *)
fun repeats nil = false
|  repeats [x] = false
|  repeats (x::xs)= if (x = hd(xs)) then true else repeats(xs);
repeats [1,2,3,4,5,6];
repeats ["a","b","c","d","d","c","e"];

(*chapter 7 exercise5 *)
fun eval (nil,x:real)= 0.0
|  eval ((n::ns),x) =  n + x *(eval(ns,x));
	eval ([6.0,3.0,5.0,2.0],4.0);
	eval ([6.0,3.0,5.0],2.0);
	eval ([2.0,2.0,2.0],2.0);
	eval ([1.0,5.0,3.0],2.0);
	eval ([],0.0);


(*chapter 7 exercise7 *)

fun quHelp (a,b)= if a < b then true else false;

fun quicksort (nil,f) = nil
|  quicksort (pivot::rest,f)=
	let
		fun split(nil) =(nil,nil)
		|	split (x::xs) =
				let
					val (below, above) = split(xs)
				in
					 
					if f(x,pivot) then (x:: below, above)
					else (below, x::above)

				end;
		val (below,above) = split(rest)
	in
		quicksort (below,f) @ [pivot] @ quicksort (above,f)
	end;
	quicksort ([5,7,9,8,2],quHelp);







	(*chapter 7 extra *)
(*
 it gives the power set of the list stuff


ch8: 3, 5, 6ab

*)



